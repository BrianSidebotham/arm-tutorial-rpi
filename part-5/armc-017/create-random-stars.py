#!/usr/bin/python

# Part of the Raspberry-Pi Bare Metal Tutorials
# https://www.valvers.com/rpi/bare-metal/
# Copyright (c) 2013-2018, Brian Sidebotham
#
# This software is licensed under the MIT License.
# Please see the LICENSE file included with this software.

# Python 3 only - sorry, the days of python2 support from me are over unless I'm supporting legacy
# systems.

import random
import argparse
import sys
import textwrap

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('--range-minimum', action='store', help='Set the minimum value of the randomised range', type=int)
parser.add_argument('--range-maximum', action='store', help='Set the maximum value of the randomised range', type=int)
parser.add_argument('--count', action='store', help='The number of random values to generate', required=True, type=int)
args = parser.parse_args()

x_values=[]
y_values=[]
speed_values=[]

x_multiplier = 16

for x in range( int(args.count) ):
    x_values.append( random.randint( 0, 800 * x_multiplier ) )
    y_values.append( random.randint( 0, 599 ) )
    speed_values.append( random.randint( 1, 31 ) )

# Write the output

with open("stars.c", "w") as wf:
    wf.write( f"""
/* This file is automatically generated by the tool create-random.py */
/* Command: {sys.argv} */
#include "stars.h"

star_t stars[] = {{
""" )

    for index, value in enumerate(x_values):
        wf.write( f"    {{ .x = { x_values[index] }, .y = { y_values[index] }, .speed = { speed_values[index] } }},\n")

    wf.write( "    };\n" )

with open("stars.h", "w") as wf:
    wf.write( f"""
/* This file is automatically generated by the tool create-random.py */
/* Command: { sys.argv } */
/* x_multiplier: { x_multiplier } */

#ifndef STARS_H
#define STARS_H

#define STARS_COUNT { args.count }

typedef struct {{
    int x;
    int y;
    int speed;
    }} star_t;

extern star_t stars[STARS_COUNT];

#endif
""" )
